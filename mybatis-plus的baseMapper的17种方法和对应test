public interface BaseMapper<T> {
    /**
     * 插入一条记录
     *
     * @param entity 实体对象
     */
    int insert(T entity);
    /**
     * 根据 ID 删除
     *
     * @param id 主键ID
     */
    int deleteById(Serializable id);
    /**
     * 根据 columnMap 条件，删除记录
     *
     * @param columnMap 表字段 map 对象
     */
    int deleteByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap); 返回删除条数
    /**
     * 根据 entity 条件，删除记录
     *
     * @param wrapper 实体对象封装操作类（可以为 null）
     */
    int delete(@Param(Constants.WRAPPER) Wrapper<T> wrapper);               返回删除条数
    /**
     * 删除（根据ID 批量删除）
     *
     * @param idList 主键ID列表(不能为 null 以及 empty)
     */
    int deleteBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList); 返回删除条数
    /**
     * 根据 ID 修改
     *
     * @param entity 实体对象
     */
    int updateById(@Param(Constants.ENTITY) T entity);
    /**
     * 根据 whereEntity 条件，更新记录
     *
     * @param entity        实体对象 (set 条件值,可以为 null)
     * @param updateWrapper 实体对象封装操作类（可以为 null,里面的 entity 用于生成 where 语句）
     */
    int update(@Param(Constants.ENTITY) T entity, @Param(Constants.WRAPPER) Wrapper<T> updateWrapper);
    /**
     * 根据 ID 查询
     *
     * @param id 主键ID
     */
    T selectById(Serializable id);
    /**
     * 查询（根据ID 批量查询）
     *
     * @param idList 主键ID列表(不能为 null 以及 empty)
     */
    List<T> selectBatchIds(@Param(Constants.COLLECTION) Collection<? extends Serializable> idList);
    /**
     * 查询（根据 columnMap 条件）
     *
     * @param columnMap 表字段 map 对象
     */
    List<T> selectByMap(@Param(Constants.COLUMN_MAP) Map<String, Object> columnMap);
    /**
     * 根据 entity 条件，查询一条记录
     *
     * @param queryWrapper 实体对象封装操作类（可以为 null）
     */
    T selectOne(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper);
    /**
     * 根据 Wrapper 条件，查询总记录数
     *
     * @param queryWrapper 实体对象封装操作类（可以为 null）
     */
    Integer selectCount(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper);
    /**
     * 根据 entity 条件，查询全部记录
     *
     * @param queryWrapper 实体对象封装操作类（可以为 null）
     */
    List<T> selectList(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper);
    /**
     * 根据 Wrapper 条件，查询全部记录
     *
     * @param queryWrapper 实体对象封装操作类（可以为 null）
     */
    List<Map<String, Object>> selectMaps(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper);
    /**
     * 根据 Wrapper 条件，查询全部记录
     * <p>注意： 只返回第一个字段的值</p>
     *
     * @param queryWrapper 实体对象封装操作类（可以为 null）
     */
    List<Object> selectObjs(@Param(Constants.WRAPPER) Wrapper<T> queryWrapper);
    /**
     * 根据 entity 条件，查询全部记录（并翻页）
     *
     * @param page         分页查询条件（可以为 RowBounds.DEFAULT）
     * @param queryWrapper 实体对象封装操作类（可以为 null）
     */
    IPage<T> selectPage(IPage<T> page, @Param(Constants.WRAPPER) Wrapper<T> queryWrapper);
    /**
     * 根据 Wrapper 条件，查询全部记录（并翻页）
     *
     * @param page         分页查询条件
     * @param queryWrapper 实体对象封装操作类
     */
    IPage<Map<String, Object>> selectMapsPage(IPage<T> page, @Param(Constants.WRAPPER) Wrapper<T> queryWrapper);
}

      @Test
      public void testInsertShouldSuccess() {
             CrmCustomer crmCustomer=new CrmCustomer();
             crmCustomer.setName("瓦力");
             crmCustomer.setSource("0");
      int result=  customerMapper.insert(crmCustomer);
      assertTrue(result==1);
      }
      
      @Test
      public void deleteByIdShouldSuccess() {
             Integer id=468;
             int result=customerMapper.deleteById(id);
             assertTrue(result==1);
      }
      
      @Test
      public void deleteByMapShouldSuccess() {
             Map<String , Object> map=new HashMap<>();
             map.put("source",5);
             int result=customerMapper.deleteByMap(map);
             assertTrue(result==2);
      }
      
      @Test
      public void deleteShouldsuccess() {
             QueryWrapper<CrmCustomer> queryWrapper=new QueryWrapper<CrmCustomer>();
             queryWrapper.eq("source",4);
      int result=  customerMapper.delete(queryWrapper);
      assertTrue(result==3);
             
      }
      
      @Test
      public void deleteBatchIdsShouldSuccess() {
             List<Integer> list=new ArrayList<>();
             list.add(468);
             list.add(469);
      int result=  customerMapper.deleteBatchIds(list);
      assertTrue(result==2);
      }
      
      @Test
      public void updateByIdShouldSuccess() {
             CrmCustomer crmCustomer=new CrmCustomer();
             crmCustomer.setId(471L);
             crmCustomer.setName("伊娃");
      int result=customerMapper.updateById(crmCustomer);
      assertTrue(result==1);
      }
      
      @Test
      public void updateShouldSuccess() {
             
             
      }
      
      @Test
      public void selectByIdShouldSuccess() {
             CrmCustomer result=customerMapper.selectById(476);
             assertTrue("跟进测试".equals(result.getName()));
      }
      
      @Test
public void selectBatchIdsShouldSuccess() {
             List<Integer> list=new ArrayList<>();
             list.add(468);
             list.add(469);
             list.add(470);
      List<CrmCustomer> result= customerMapper.selectBatchIds(list);
             
      assertTrue(result.size()==3);   
      }
      
      @Test
      public void selectByMapShouldSuccess() {
             
             Map<String, Object> map=new HashMap<>();
             map.put("name","电饭煲房地产");
      List<CrmCustomer> resultList=customerMapper.selectByMap(map);
      assertTrue(resultList.size()==1);
             
      }
      
      @Test
      public void selectOneShouldSuccess() {
             QueryWrapper<CrmCustomer> queryWrapper=new QueryWrapper<>();
             queryWrapper.eq("id", 476);
             CrmCustomer result=customerMapper.selectOne(queryWrapper);
             assertTrue(result.getId()==476);
      }
      
      @Test
      public void selectCountShouldSuccess() {
             
             QueryWrapper<CrmCustomer> queryWrapper=new QueryWrapper<>();
      queryWrapper.isNotNull("name");
Integer num=customerMapper.selectCount(queryWrapper);
             assertTrue(num==16);
      }
      
      @Test
      public void selectListShouldSuccess() {
             QueryWrapper<CrmCustomer> queryWrapper=new QueryWrapper<>();
             queryWrapper.eq("if_loan","是");
      List<CrmCustomer> result= customerMapper.selectList(queryWrapper);
             assertTrue(result.size()==9);
      }
      
